# UK universities tend to have "BAME" groups. It should be noted these are seldom
# used in admissions, where POLAR4 quantiles are a larger decider on contextual
# offers. Let's add the group to the dataset.
data[, "BAME"] <- 1 - data[,"White.ethnic.group"]
ethnic_cols <- append(ethnic_cols, c("BAME", "Other.Mixed.ethnic.group"))
# Let's now plot and see whether there are any trends with the response variable.
par(mfrow = c(2,2))
plot(data[,"BAME"], data$satisfied_feedback, col="lightblue", main="BAME", xlab = "BAME")
model <- lm(data$satisfied_feedback ~ data[,"BAME"])
abline(model, col="red")
hist(data[,"BAME"], main = "BAME", xlab = "BAME", col = "lightblue", breaks = 10, freq = FALSE)
dens <- density(data[,"BAME"])
lines(dens, col = "red")
cor(data$BAME,data$satisfied_feedback)
# No correlations with satisfied feedback and right skewed. Differences in
# economic background lead to substantial differences in life experiences between
# wealthy and poor BAME students and we can't stratify by this so let's leave it
# out of the model.
# Combine POLAR4 quintiles 1 and 2 as these are used for contextual offers at
# many UK Unis:
data$POLAR4.Q1Q2 <- data$POLAR4.Q1 + data$POLAR4.Q2 + data$POLAR4.Q3
POLAR_cols <- append(POLAR_cols, "POLAR4.Q1Q2")
plot(data[,"POLAR4.Q1Q2"], data$satisfied_feedback, col="lightblue", main="POLAR4.Q1Q2", xlab = "POLAR4.Q1Q2")
model <- lm(data$satisfied_feedback ~ data[,"POLAR4.Q1Q2"])
abline(model, col="red")
hist(data[,"POLAR4.Q1Q2"], main = "POLAR4.Q1Q2", xlab = "POLAR4.Q1Q2", col = "lightblue", breaks = 10, freq = FALSE)
dens <- density(data[,"POLAR4.Q1Q2"])
lines(dens, col = "red")
cor(data$POLAR4.Q1Q2,data$satisfied_feedback)
# Decent correlationm so should include this. Slightly right skewed but otherwise
# seems like a good feature to include.
# PCA ATTEMPTS?
par(mfrow = c(1,1))
pca_result <- prcomp(data[,c(POLAR_cols[1:5],ethnic_cols[1:5])], scale = TRUE)
screeplot(pca_result, type = "lines", main = "Scree Plot")
# 3 components are needed to explain most of the variance in the model so let's
# add these to the dataset.
data <- cbind(data, pca_result$x[,1:3])
PCA_cols <- c("PC1", "PC2", "PC3")
# Add the Russell Group unis as this is of particular interest in the UK when
# discussing universities.
G5 <- c("Oxford ", "UCL ", "Imperial College ", "London School of Economics ",
"Cambridge ")
RG <- c(G5, "Birmingham ", "Bristol ", "Cardiff ", "Durham ", "Edinburgh ",
"Exeter ", "Glasgow ", "King's College London ", "Leeds ", "Liverpool ",
"Manchester ", "Newcastle ", "Nottingham ",  "Queen Mary ",
"Queen's Belfast", "Sheffield ", "Southampton ", "Warwick ", "York ")
data$RG <- 0
data[RG,]$RG <- 1
institutional_cols <- append(institutional_cols, "RG")
# Reset the colnames vector and select the covariates we want to include.
cols = c(1:ncol(data))
names(cols) = names(data)
model_data <- data[cols[c(institutional_cols, outcome_cols[-1], # Don't want added_value
POLAR_cols[length(POLAR_cols)] # Only POLAR4.Q1Q2
# ,ethnic_cols[length(ethnic_cols)],sex_cols[-1]
)]]
# Make a new named vector for columns in the model dataframe.
model_cols = c(1:ncol(model_data))
names(model_cols) = names(model_data)
# Scale all but the response variable and binary column in the model dataset.
model_data[,-model_cols[c("satisfied_feedback", "RG")]] <- scale(
model_data[,-model_cols[c("satisfied_feedback", "RG")]])
# Use a heatmap to see any correlations with the response and any
# multicolinearity with our final data.
cor_matrix <- cor(model_data)
pheatmap(cor_matrix,
display_numbers = TRUE,  # Display correlation values
number_format = "%.2f",  # Use 2 decimal places
cluster_rows = FALSE, # Hierachichal clustering is removed.
cluster_cols = FALSE)
# Lets start by using a frequentist linear model to see how suitable it is.
covariates_added <- paste(colnames(model_data)[-1], collapse = " + ")
model_formula <- as.formula(paste(c("satisfied_feedback/100 ~ ", covariates_added,
" + I(satisfied_teaching^2) + I(continuation^2)"), collapse = ""))
baseline_model <- lm(model_formula, data = model_data)
summary(baseline_model)
par(mfrow = c(2,2))
plot(baseline_model)
# Remove these three unis as they are outliers and rather different to the
# majority of the other universities.
model_data <- model_data[!(row.names(model_data) %in%
c("University of the Arts London ", "SOAS ", "Goldsmiths ")),]
# Refit
baseline_model <- lm(model_formula, data = model_data)
summary(baseline_model)
par(mfrow = c(2,2))
plot(baseline_model)
# We now see a lot of left skew which is similar to the response.
######                    Generalised Regression Model                    ######
# Let's new fit a Bayesian Linear Regression model using brms
# Our Linear Model  fits the response variable well but we have some left skew.
# This is unsurprising due to the skewage we can see in the earlier histograms.
# Let's expand our work to a GLM which can account for left skew. We will use
# the same linear predictor as before.
# A formula to confine satisfied_feedback to [0,1] so we can use the Beta model.
model_formula_beta <- as.formula(paste(c("satisfied_feedback/100 ~ ", covariates_added,
" + I(satisfied_teaching^2) + I(continuation^2)"), collapse = ""))
## Fit the different brms models. ##
# Set priors
skew_prior <- set_prior('normal(-0.5, 0.5)', class = 'alpha')
coef_prior <- set_prior('normal(0, 10)', class = 'b')
intercept_prior <- set_prior('normal(0, 10)', class = 'Intercept')
phi_prior <- set_prior('gamma(1, 0.01)', class = 'phi')
sigma_prior <- set_prior('gamma(1, 0.01)', class = 'sigma')
# Normal #
mod.brms <- brm(model_formula_beta,
data = model_data,
family = gaussian(),
prior = c(coef_prior, intercept_prior, sigma_prior),
iter = 5000)
#  Skew Normal #
mod.brms.sn <- brm(model_formula_beta,
data = model_data,
family = skew_normal(),
prior = c(coef_prior, intercept_prior, sigma_prior, skew_prior),
iter = 5000)
# Beta #
mod.brms.beta <- brm(model_formula_beta,
data = model_data,
family = Beta(),
prior = c(coef_prior, intercept_prior, phi_prior),
iter = 5000)
# Compute looic
loo_normal <- loo(mod.brms) #,  to fix high k Pareto
loo_skewnormal <- loo(mod.brms.sn)
loo_beta <- loo(mod.brms.beta)
# Compare looic for each model
data.frame(model = c("Normal", "Skew Normal", "Beta"),
loo = c(loo_normal$looic, loo_skewnormal$looic,
loo_beta$looic))
loo_compare(loo_normal, loo_skewnormal,
loo_beta)
# Appears Beta is the best model but interpretation is a bit trickier. Let's
# see if it is worth it from posterior predictive checks.
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
model_checks(mod.brms.beta)
# It appears that the Beta model outshines the skew normal in almost every way.
# Lets look at some more plots to check for convergence.
# Empirical cdf
pp_check(mod.brms.beta, type = 'ecdf_overlay', ndraws = 30)
# Scatter plot for average over posterior distributions
pp_check(mod.brms.beta, type = 'scatter_avg', ndraws = 30)
# Traceplots
plot(mod.brms.beta)
print(round(exp(fixef(mod.brms.beta)),3))
p_value(mod.brms.beta)
install.packages(showtext)
install.packages("showtext)
""
# Scatter plot for average over posterior distributions
pp_check(mod.brms.beta, type = 'scatter_avg', ndraws = 30)
# Traceplots
plot(mod.brms.beta)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
install.packages("showtext")
font_add_google("Lato", "lato")
library(showtext)
font_add_google("Lato", "lato")
showtext_auto()
# Traceplots
plot(mod.brms.beta)
# Scatter plot for average over posterior distributions
pp_check(mod.brms.beta, type = 'scatter_avg', ndraws = 30) +   theme_minimal(base_family = "lato") +  # Base font
# Traceplots
plot(mod.brms.beta)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
theme_minimal(base_family = "lato")+
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
theme_minimal(base_family = "lato")+
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
theme_get()$text$family
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(base_family = "lato", plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30))
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(family = "lato", hjust = 0.6, size = 30),
axis.title = element_text(family = "lato",size = 30),
axis.text = element_text(family = "lato",size = 30),
legend.text = element_text(family = "lato",size = 30),
legend.title = element_text(family = "lato",size = 30))
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30))
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(hjust = 0.6, size = 30),
axis.title = element_text(size = 30),
axis.text = element_text(size = 30),
legend.text = element_text(size = 30),
legend.title = element_text(size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(family = "lato",hjust = 0.6, size = 30),
axis.title = element_text(family = "lato",size = 30),
axis.text = element_text(family = "lato",size = 30),
legend.text = element_text(family = "lato",size = 30),
legend.title = element_text(family = "lato",size = 30)) +
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(family = "lato", hjust = 0.6, size = 30),
axis.title = element_text(family = "lato", size = 30),
axis.text = element_text(family = "lato", size = 30),
legend.text = element_text(family = "lato", size = 30),
legend.title = element_text(family = "lato", size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(family = "lato", hjust = 0.6, size = 30),
axis.title = element_text(family = "lato", size = 30),
axis.text = element_text(family = "lato", size = 30),
legend.text = element_text(family = "lato", size = 30),
legend.title = element_text(family = "lato", size = 30)) +
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
model_checks(mod.brms)
model_checks(mod.brms)
# Define a function to carry out all of the posterior predictive checks for us.
model_checks <- function(model){
print(summary(model), digits = 3)
summary_statistics <- c("mean", "median", "min", "max", "skewness", "sd")
summary_statistics_titles <- c("Mean", "Median", "Minimum", "Maximum",
"Skewness", "Standard Devation")
for(i in 1:length(summary_statistics)){
ppcheck <- pp_check(model, type = "stat", stat = summary_statistics[i])
ppcheck$layers[[2]]$aes_params$linewidth <- 2.5
fig <- ppcheck +
ggtitle(paste("Posterior Predictive Check of", summary_statistics_titles[i])) +
theme(plot.title = element_text(family = "lato", hjust = 0.6, size = 30),
axis.title = element_text(family = "lato", size = 30),
axis.text = element_text(family = "lato", size = 30),
legend.text = element_text(family = "lato", size = 30),
legend.title = element_text(family = "lato", size = 30)) +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0))) +
scale_fill_manual(values = rgb(4/255.0, 30/255.0, 66/255.0))
if(summary_statistics[i] == "skewness"){
fig <- fig + xlab("Skew")
}else{
fig <- fig + xlab("Satisfied Feedback")
}
print(fig)
}
ppcheck <- pp_check(model, ndraws = 30)
ppcheck + ggtitle("Posterior Predictive Check of Distribution") +
theme(plot.title = element_text(family = "lato", hjust = 0.6, size = 30),
axis.title = element_text(family = "lato", size = 30),
axis.text = element_text(family = "lato", size = 30),
legend.text = element_text(family = "lato", size = 30),
legend.title = element_text(family = "lato", size = 30)) +
geom_line(data = data.frame(x = density(model$data$`satisfied_feedback/100`)$x,
y = density(model$data$`satisfied_feedback/100`)$y),
aes(x = x, y = y),
color = rgb(193/255.0, 0, 67/255.0), size = 2.5) +
xlab("Satisfied Feedback") +
ylab("Density") + scale_color_manual(values = c(rgb(193/255.0, 0, 67/255.0),
rgb(4/255.0, 30/255.0, 66/255.0, 1)))
}
model_checks(mod.brms)
help("showtext_auto")
